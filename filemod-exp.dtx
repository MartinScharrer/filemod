%
% \iffalse
%<*exp>
% \fi
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsection{Expandable Macros}
%
% \subsubsection{Numeric macros}
%
% \begin{macro}{\filemodnumdate}
% Simply calls the parse macro.
%    \begin{macrocode}
\newcommand*\filemodnumdate{\filemodparse\filemod@numdate}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@numdate}[7]{YYYY}{MM}{DD}{HH}{mm}{SS}{TZ}
%    \begin{macrocode}
% Gobbles everything except "YYYYMMDD" which is returned as number without the braces.
\def\filemod@numdate#1#2#3#4#5#6#7{#1#2#3}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\filemodnumtime}
% Simply calls the parse macro.
%    \begin{macrocode}
\newcommand*\filemodnumtime{\filemodparse\filemod@numtime}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@numtime}[7]{YYYY}{MM}{DD}{HH}{mm}{SS}{TZ}
% Gobbles everything except "HHmmSS" which is returned as number without the braces.
%    \begin{macrocode}
\def\filemod@numtime#1#2#3#4#5#6#7{#4#5#6}
%    \end{macrocode}
% \end{macro}
%
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Optional argument handler}
%
% \begin{macro}{\filemod@opt}[3]{Macro to read optional argument when present}{Next macro which receives default optional argument as first normal argument}{\texttt{[} or first mandatory argument}
% This macro checks if an optional argument is present. Here |#1| and |#2| are handlers and |#3| is the first balanced text which followed the macro, i.e.\ either "[" or the first
% mandatory argument.
% The |\ifx| compares "[" and the first token of |#3|. There are three possible cases:
% \begin{enumerate}
%   \item If they do not match everything until and including |\else| is skipped.
% Then |\remove@to@nnil@exec| is expanded which removes the following |\@nnil|. This leaves |\empty| and the rest of the \emph{false} clause.
% The |\fi| is removed using |\expandafter| and the trailing |{#3}| is read by |#2| as normal argument.
%   \item If |#3| is exactly "[" the |\ifx[#3| part is removed by \TeX. The |\remove@to@nnil@exec| removes the |\@nnil| and the |\remove@to@nnil| because there was nothing before |\@nnil|.
% Therefore |\expandafter#1| is executed which triggers |\else| which removes everything up to and including |\fi|.
% Then the optional argument handler |#1| is expanded which receives the "[" as "{[}" which is then gobbled.
%   \item The |#3| starts with "[" but contains more material, i.e.\ was original a mandatory argument. Then |\ifx| expands to the \emph{true} clause and removes
%   the first token of |#3|. The |\remove@to@nnil@exec| gobbles the rest of |#3| but reads and reinserts |\remove@to@nnil| which gobbles everything to the next |\@nnil|
%   after |\else| and therefore jumps to the \emph{false} clause. This clause is executed like normal, i.e.\ |#2| is called with the default optional argument and |{#3}| as second argument.
% \end{enumerate}
%    \begin{macrocode}
\def\filemod@opt#1#2#3{%
    \expandafter
    \remove@to@nnil@exec
    \ifx[#3\@nnil\remove@to@nnil
      \expandafter#1%
    \else\@nnil\empty
      \expandafter#2%
      \expandafter\filemodcmpdefault
    \fi
    {#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\remove@to@nnil@exec}[2]{Tokens to remove}{Following token}
% Removes everything to |\@nnil| and executes the next token except if |#1| was empty.
%    \begin{macrocode}
\def\remove@to@nnil@exec#1\@nnil#2{%
    \ifx\@nnil#1\@nnil\else
      \expandafter#2
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \subsubsection{Compare file dates}
%
% \begin{macro}{\filemodcmp}
% Compare two file mod dates.
% Calls macros to check for an optional argument in an expandable way.
%    \begin{macrocode}
\newcommand*\filemodcmp{%
    \filemod@opt\filemod@cmp@opt\filemod@cmp
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodcmpdefault}
% The default optional argument which is used if none is provided.
%    \begin{macrocode}
\newcommand*\filemodcmpdefault{1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@cmp@opt}[2]{"[" wrapped in \{\}}{Content of optional argument}
% Removes the brackets from the optional argument.
%    \begin{macrocode}
\def\filemod@cmp@opt#1#2]{%
    \filemod@cmp{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@cmp}
% This saves several |\expandafter|'s in \Macro\filemod@opt.
%    \begin{macrocode}
\def\filemod@cmp{\filemod@@cmp>}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@@cmp}[4]{Compare sign: \texttt{>} or \texttt{<}}{Optional argument}{File name 1}{File name 2}
% Compares the dates and times of the two files. The three cases are (0) file 1 newer than file 2, (1) file 2 newer than file 1,
% (2) both files have the same date.
%
% In (2) the optional argument |#2| determines which clause is executed.
%    \begin{macrocode}
\def\filemod@@cmp#1#2#3#4{%
    \ifcase0%
        \ifnum\filemodnumdate{#4}#1\filemodnumdate{#3} 1\else
            \ifnum\filemodnumdate{#4}=\filemodnumdate{#3} %
                \ifnum\filemodnumtime{#4}#1\filemodnumtime{#3} 1\else
                    \ifnum\filemodnumdate{#4}=\filemodnumdate{#3} 2\fi
                \fi
            \fi
        \fi
    \space
       \csname @firstoft\ifnum#1>2 hree\else wo\fi\expandafter\endcsname
    \or
       \csname @secondoft\ifnum#2>2 hree\else wo\fi\expandafter\endcsname
    \else
       \csname @%
       \ifcase#2%
         gobbletwo%
       \or
         firstoftwo%
       \or
         secondoftwo%
       \else
         thirdofthree%
       \fi
       \expandafter
       \endcsname
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@firstofthree}
% Expands to the first of the next three arguments.
%    \begin{macrocode}
\long\def\@firstofthree#1#2#3{#1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@secondofthree}
% Expands to the second of the next three arguments.
%    \begin{macrocode}
\long\def\@secondofthree#1#2#3{#2}
%    \end{macrocode}
% \end{macro}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \subsubsection{Compare file mod times and return file name}
%
%
% \begin{macro}{\filemodnewest}
% First a macro is called to handle an optional argument in an expandable way.
%    \begin{macrocode}
\newcommand*\filemodnewest{%
    \filemod@opt\filemod@newest@opt\filemod@newest
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@newest@opt}[2]{The "[" wrapped in \{\}}{Content of optional argument}
% Removes braces around the optional argument.
%    \begin{macrocode}
\def\filemod@newest@opt#1#2]{%
    \filemod@newest{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@newest}[3]{optional argument}{file name 1}{file name 2}
% Uses the normal (internal) compare macro with the file names as the result clauses.
%    \begin{macrocode}
\def\filemod@newest#1#2#3{%
    \filemod@@cmp>{#1}{#2}{#3}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\filemodoldest}
% First a macro is called to handle an optional argument in an expandable way.
%    \begin{macrocode}
\newcommand*\filemodoldest{%
    \filemod@opt\filemod@oldest@opt\filemod@oldest
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@oldest@opt}[2]{The "[" wrapped in \{\}}{Content of optional argument}
% Removes braces around the optional argument.
%    \begin{macrocode}
\def\filemod@oldest@opt#1#2]{%
    \filemod@oldest{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@oldest}[3]{optional argument}{file name 1}{file name 2}
% Uses the normal (internal) compare macro with the file names as the result clauses.
%    \begin{macrocode}
\def\filemod@oldest#1#2#3{%
    \filemod@@cmp<{#1}{#2}{#3}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Newest and oldest file of a list of files}
%
% \begin{macro}{\filemodNewest}[1]{Tokens between macros and opening brace}
% Checks for an optional argument and substitutes the default if it is missing.
%    \begin{macrocode}
\newcommand*\filemodNewest{}
\def\filemodNewest#1#{%
  \expandafter\expandafter
  \expandafter\@filemodNewest
  \csname
    @%
  \ifx\@nnil#1\@nnil
    first%
  \else
    second%
  \fi
    oftwo%
  \endcsname
    {[\filemodcmpdefault]}%
    {#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodOldest}[1]{Tokens between macros and opening brace}
% Like \Macro\filemodNewest but returns the oldest file in the given list.
% It and its sub-macros are simply copies of minor changes of the |Newest| counterparts.
% This is done for the benefit of expansion speed versus memory usage.
% Future versions might use common code instead.
%    \begin{macrocode}
\newcommand*\filemodOldest{}
\def\filemodOldest#1#{%
  \expandafter\expandafter
  \expandafter\@filemodOldest
  \csname
    @%
  \ifx\@nnil#1\@nnil
    first%
  \else
    second%
  \fi
    oftwo%
  \endcsname
    {[\filemodcmpdefault]}%
    {#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@filemodNewest}[2]{Optional argument}{File name list}
% Removes "[]" from first and braces from the second argument (the file name list).
%    \begin{macrocode}
\def\@filemodNewest[#1]#2{%
    \@@filemodNewest{#1}#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@filemodOldest}[2]{Optional argument}{File name list}
% Like \Macro\@filemodNewest.
%    \begin{macrocode}
\def\@filemodOldest[#1]#2{%
    \@@filemodOldest{#1}#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@@filemodNewest}[2]{Optional argument}{First file name}
% Reads the optional argument as |#1| and the first file name as |#2|.
% It then reverses the order for the processing loop.
%    \begin{macrocode}
\def\@@filemodNewest#1#2{%
    \filemod@Newest{#2}{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@@filemodOldest}[2]{Optional argument}{First file name}
%    \begin{macrocode}
\def\@@filemodOldest#1#2{%
    \filemod@Oldest{#2}{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@Newest}[3]{First file name}{Optional argument}{Second file name}
% Checks if the second file name is the end marker. In this case the first file name is returned (i.e.\ expanded to).
% Otherwise expands the compare macro. This is done in one step using |\csname| which is then turned into a string
% which |\| is gobbled. Because of the required expandability the |\escapechar| can't be changed.
% Finally it calls itself recursively with the expanded result.
%    \begin{macrocode}
\def\filemod@Newest#1#2#3{%
  \iffilemod@end{#3}%
    {#1}%
    {%
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\filemod@Newest
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter{%
    \expandafter\expandafter
    \expandafter\@gobble
    \expandafter\string\csname\filemod@@cmp>{#2}{#1}{#3}{#1}{#3}\endcsname}{#2}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@Oldest}[3]{First file name}{Optional argument}{Second file name}
% Like \Macro\filemode@Newest but with different compare operator.
%    \begin{macrocode}
\def\filemod@Oldest#1#2#3{%
  \iffilemod@end{#3}%
    {#1}%
    {%
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\filemod@Oldest
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter{%
    \expandafter\expandafter
    \expandafter\@gobble
    \expandafter\string\csname\filemod@@cmp<{#2}{#1}{#3}{#1}{#3}\endcsname}{#2}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\iffilemod@end}[1]{Next file name or end marker}
% Checks if the argument is the \Macro\filemod@end marker.
%    \begin{macrocode}
\def\iffilemod@end#1{%
  \ifx\filemod@end#1%
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@end}
% Unique end marker which would expand to nothing.
% Could be replaced with |\@nnil|.
%    \begin{macrocode}
\def\filemod@end{\@gobble{filemod@end}}
%    \end{macrocode}
% \end{macro}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \iffalse
%</exp>
% \fi
%
