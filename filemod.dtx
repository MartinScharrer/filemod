% \iffalse meta-comment
%<=*COPYRIGHT>
%%
%% Copyright (c) 2011-2022 by Martin Scharrer <martin.scharrer@web.de>
%% ----------------------------------------------------------
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%   http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%% 
%% This work has the LPPL maintenance status `maintained'.
%% 
%% The Current Maintainer of this work is Martin Scharrer.
%% 
%% This work consists of the files filemod.dtx and filemod.ins
%% and the derived files filemod.sty, filemod-expmin.sty,
%% filemod.tex and filemod-expmin.tex.
%%
%<=/COPYRIGHT>
% \fi
%
% \iffalse
%<*dtx>
\begingroup
%</dtx>
%<*install>
\input ydocstrip.tex
\keepsilent
\askforoverwritefalse
\generate{%
    \file{filemod.sty}        {\nopreamble\from{filemod.dtx}{filemod.sty,latex}}%
    \file{filemod.tex}        {\nopreamble\from{filemod.dtx}{filemod.sty,tex}}%
    \file{filemod-expmin.sty} {\nopreamble\from{filemod.dtx}{filemod-expmin.sty,latex}}%
    \file{filemod-expmin.tex} {\nopreamble\from{filemod.dtx}{filemod-expmin.sty,tex}}%
}
%</install>
%<install>\endbatchfile
%<*dtx>
\endgroup
%</dtx>
% \fi
%
% \iffalse
%<*dtx>
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesFile{filemod.dtx}[%
%<=*DATE>
    2011/09/19
%<=/DATE>
%<=*VERSION>
    v1.2
%<=/VERSION>
    DTX file for filemod]
\documentclass{ydoc}
\usepackage{filemod}[2011/09/19]
\usepackage{multicol}
\usepackage{csquotes}
\usepackage{tgpagella}
\usepackage{dtklogos}
\protected\def\qq#1{``#1''}
\MakeShortMacroArgs\`\relax
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\setcounter{tocdepth}{2}
\begin{document}
  \DocInput{filemod.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</dtx>
% \fi
%
% \CheckSum{804}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2011/03/23}{First release}
% \changes{v1.1}{2011/03/24}{Added Lua(La)TeX and plain eTeX support.}
% \changes{v1.2}{2011/09/19}{Added macros to print filemod date in \cs{today} format.}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \GetFileInfo{filemod.dtx}
% \author{Martin Scharrer}
% \email{martin.scharrer@web.de}
% \maketitle
%
% \begin{abstract}
%   This package provides macros to read and compare the modification dates of files.  These files can be |.tex| files,
%   images or other files as long as they can be found by the \LaTeX\ compiler.  It uses the |\pdffilemoddate| primitive
%   of pdf\LaTeX\ to receive the file modification date as PDF date string, parses it and returns the value to the user.
%   The functionality is provided by purely expandable macros or by faster but non-expandable ones.
%
%   This package will work with \LaTeX{} and plain \eTeX{} as long pdf\LaTeXTeX{} (in PDF or DVI mode) or Lua\LaTeXTeX{}
%   is used. \XeTeX{} is not supported because it does not provide |\pdffilemoddate|.
% \end{abstract}
%
% \begin{multicols}{2}
%   \tableofcontents
% \end{multicols}
%
% \section{Introduction}
% This package provides several macros to read and compare the modification dates of files.  The same functionality is
% provided by two groups of macros: The macros of the first group all start with a lower case letter and are fully
% expandable.  This means they can be used in places where a string must be provided, like in `|\input`.  Because
% assignments are not expandable some of these macros, like the ones for comparisons, need to reread and re-parse the
% file modification dates if they are required in more than one place inside the macro.  The macros of the second group
% all start with a upper case letter and are not expandable because assignments are used internally.  However, this
% allows techniques which speed up the processing of these macros, making this macros faster than the expandable
% counterparts.  If expandability is not required these macros should be preferred.
%
%
% \section{Usage}
% This package can be loaded with \LaTeX{} using |\usepackage{filemod}| as usual.
% With plain \eTeX{} it can be loaded using |\input filemod|.
% Some required internal \LaTeX{} macros (like |\@gobble|, |\@firstofone|, etc.) are then defined.
%
% A minimal set of expandable macros for the comparison of file modification dates is provided by the sub-package
% \pkg{filemod-expmin}. It is useful for other packages which need this functionality but don't like to load the whole package.
% It can be loaded using |\usepackage{filemod-expmin}| (or |\RequirePackage|) or |\input filemod-expmin|, respectively.
%
%
% \subsection{Print File Modification Date and Time}
% The following macros can be used to print (i.e.\ typeset) the file modification date and time of files in the
% document.  The \Macro\formatdate and \Macro\formattime macros of the \pkg{datetime}\footnote{CTAN:
% \url{http://www.ctan.org/pkg/datetime}} can be used in addition to format the dates and times in a language specific
% format.  See also the \pkg{getfiledate}\footnote{CTAN: \url{http://www.ctan.org/pkg/getfiledate}} package which also
% prints file modification dates including adding fancy frames around it.
%
% \DescribeMacro{\filemodprint}{<\/filename>}
% Prints the file modifications date and time using `|\filemodparse` and `|\thefilemod`.
%
%
% \DescribeMacro{\filemodprintdate}{<\/filename>}
% Prints the file modifications date using `|\filemodparse` and `|\thefilemoddate`.
%
%
% \DescribeMacro{\filemodprinttime}{<\/filename>}
% Prints the file modifications time using `|\filemodparse` and `|\thefilemodtime`.
%
%
% \DescribeMacro{\thefilemod}
% Reads the date and time as seven arguments and typesets it. This macro can be redefined to a custom format.\\
% By default it simple uses `|\thefilemoddate` and `|\thefilemodtime` separated by `|\filemodsep` (a space by default):
% \enquote{\filemodprint{\jobname.dtx}}
%
%
% \DescribeMacro{\thefilemoddate}
% Receives the date as three arguments YYYY, MM and DD and typesets it. This macro can be redefined to a custom format.\\
% Default format: \enquote{\filemodprintdate{\jobname.dtx}}
%
% It could be redefined to use the `|\formatdate` macro of the \pkg{datetime}:\\
% |\renewcommand*{\thefilemoddate}[3]{\formatdate{#3}{#2}{#1}}|
%
%
% \DescribeMacro{\thefilemodtime}
% Receives the time and timezone as four arguments HH, mm, SS and TZ and typesets it. This macro can be redefined to a custom format.\\
% Default format: \enquote{\filemodprinttime{\jobname.dtx}}
%
% It could be redefined to use the `|\formattime` macro of the \pkg{datetime}:\\
% |\renewcommand*{\thefilemodtime}[4]{\formattime{#1}{#2}{#3}}|
%
%
% \DescribeMacro{\Filemodtoday}{<\/filename>}
% Prints the file modification date of the given file in the current format of \Macro\today.
% For this the compiler date is set locally to the file modification date and then \Macro\today is used to print that date.
% This takes advantages of any localised definition provided by the \pkg{babel} package or other packages.
%
% \DescribeMacro{\FilemodToday}{<\/filename>}
% Similar to \Macro\FilemodToday but also prints the full file modification date/time using the
% \Macro\thefilemod format macro.
% For this the \Macro\thefilemoddate macro is changed locally to use \Macro\today with the file modification date.
%
%
% \subsection{Get File Modification Date and Time as Number}
% The following macros return both the file modification date and time as an integer number which is in the valid range for \TeX.
% They can be used for numerical operations and are used internally by the comparison macros.
%
% \DescribeMacro{\filemodnumdate}{<\/filename>}
% Expands to an integer of the form |YYYYMMDD| which can be used for numeric comparisons like `|\ifnum`.
% This macros uses `|\filemodparse` and `|\filemodnotexists` will be used if the file does not exist.
%
% \DescribeMacro{\filemodnumtime}{<\/filename>}
% Expands to an integer of the form |HHmmSS| which can be used for numeric comparisons like `|\ifnum`.
% This macros uses `|\filemodparse` and `|\filemodnotexists` will be used if the file does not exist.
%
% \DescribeMacro{\filemodNumdate}{<\/filename>}
% Expands to an integer of the form |YYYYMMDD| which can be used for numeric comparisons like `|\ifnum`.
% Parses the file modification date by itself and will return |00000000| if the file does not exist.
%
% \DescribeMacro{\filemodNumtime}{<\/filename>}
% Expands to an integer of the form |HHmmSS| which can be used for numeric comparisons like `|\ifnum`.
% Parses the file modification date by itself and will return |000000| if the file does not exist.
%
%
% \DescribeMacro{\Filemodgetnum}{<\/filename>}
% Stores the file modification date and time as numbers (|YYYYMMDD| and |HHmmSS|) as well the timezone string
% into the macros `|\filemoddate`, `|\filemodtime` and `|\filemodtz`.
%
%
%
% \subsection{Compare File Modification Date/Time}
% The following macros allow the comparison of the file modification date/time of two files.
%
% \DescribeMacro{\filemodcmp}[<num>]{<\/filename 1>}{<\/filename 2>}{<clause 1>}{<clause 2>}!\optional!{<clause 3>}
% This macro compares the file modification date and time of the two given files and expands to the clause of the
% newest file. An numerical optional argument can be given to determine the outcome if both files have the exact same 
% modification date/time (or both do not exists). If `<num>` is 0, no clause will be expanded, i.e.\ the macro expands
% to an empty text. If `<num>` is 1 (default) or 2 the macro expands to the corresponding clause.
% However if `<num>` is 3, the macro will await a third clause and expands to it if both files modification dates are equal.
%
% This macro is fully expandable even when the optional argument is used. However, `<\/filename 1>` must not be equal to "[".
%
%
% \DescribeMacro{\filemodCmp}{<\/filename 1>}{<\/filename 2>}{<clause 1>}{<clause 2>}
% This is a simpler and therefore faster version of `|\filemodcmp`. It is fully expandable, does not take any optional
% arguments and will always expand to the first clause if both file modification dates are equal (or both files do not exist).
% The `|\filemodNumdate` and `|\filemodNumtime` macros are used in the comparison.
% These three macros are also provided by the sub-package \pkg{filemod-expmin}.
%
%
% \DescribeMacro{\Filemodcmp}[<num>]{<\/filename 1>}{<\/filename 2>}{<clause 1>}{<clause 2>}!\optional!{<clause 3>}
% This macro provides the same functionality as `|\filemodcmp`.
% It is not expandable but will be processed faster. The optional
% argument is processed like normally.
%
% \DescribeMacro{\FilemodCmp}[<num>]{<\/filename 1>}{<\/filename 2>}
% This macro will compare the two file modification dates like `|\Filemodcmp` and `|\filemodcmp` but does not take
% the possible clauses as arguments, instead it stores the result into the expandable macro `|\filemodcmpresult`
% which then takes `{<clause~1>}!\linebreak[3]!{<clause~2>}` (and also `{<clause~3>}` if `<num>` was 3) as arguments and expand to the one
% corresponding to the newest file.
% This set of macros gives the user the speed benefit of `|\Filemodcmp` while still be able to use the result in an expandable context.
%
%
% \DescribeMacro{\filemodoptdefault}
% Holds the default number (i.e.\ 1) for the optional argument of the previous and following macros.
% This macro can be redefined with a number or a numeric expression valid for |\ifcase|. It should not contain any
% trailing spaces. Note that some commands only accept 1 or 2 as valid optional argument.
%
%
%
% \subsection{Return Newest or Oldest File from a List}
% The following macros return the newest or oldest file.
% Note that the optional arguments of the following macros should only be either 1 or 2.
% If no optional argument is provided the value of `|\filemodoptdefault` is used.
%
% \DescribeMacro{\filemodnewest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Expands the filename of the newest given file or filename `<num>` if both file modification dates are identical.
% The catcode of the filenames is not changed.
%
% \DescribeMacro{\filemodoldest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Expands the filename of the oldest given file or filename `<num>` if both file modification dates are identical.
% The catcode of the filenames is not changed.
%
%
% \DescribeMacro{\filemodNewest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Expands the filename of the newest given file.
% The filename will have catcode 12 except in the case when only one filename was given which is returned unchanged.
% The files are compared in pairs of two in the given order (i.e.\ first 1 and 2 and the result with 3 etc.)
% The optional argument `<num>` can be used to indicate which filename should be used if both file modification dates are identical.
%
%
% \DescribeMacro{\filemodOldest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Expands the filename of the oldest given file.
% The filename will have catcode 12 except in the case when only one filename was given which is returned unchanged.
% The files are compared in pairs of two in the given order (i.e.\ first 1 and 2 and the result with 3 etc.)
% The optional argument `<num>` can be used to indicate which filename should be used if both file modification dates are identical.
%
%
%
% \DescribeMacro{\Filemodnewest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Same as `|\filemodnewest` just not expandable but faster.
% Stores the newer of the two file names in `|\filemodresultfile`. Its file modification date and time is stored
% in `|\filemodresultdate` and `|\filemodresulttime`.
% The catcode of the filenames is not changed.
%
%
% \DescribeMacro{\Filemodoldest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Same as `|\filemodoldest` just not expandable but faster.
% Stores the older of the two file names in `|\filemodresultfile`. Its file modification date and time is stored
% in `|\filemodresultdate` and `|\filemodresulttime`.
% The catcode of the filenames is not changed.
%
%
% \DescribeMacro{\FilemodNewest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Same as `|\filemodNewest` just not expandable but faster.
% Stores the newest of the given file names in `|\filemodresultfile`. Its file modification date and time is stored
% in `|\filemodresultdate` and `|\filemodresulttime`.
% The catcode of the filenames is not changed.
%
%
% \DescribeMacro{\FilemodOldest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Same as `|\filemodOldest` just not expandable but faster.
% Stores the oldest of the given file names in `|\filemodresultfile`. Its file modification date and time is stored
% in `|\filemodresultdate` and `|\filemodresulttime`.
% The catcode of the filenames is not changed.
%
%
%
%
% \subsection{Parsing of the file modification date}
% The format returned by the |\pdffilemoddate| primitive is \enquote{\texttt{D:}} followed by a number in the format
% \enquote{\texttt{YYYYMMDDHHmmSST}} which needs to be parsed before it is useful. The letters have the following
% meaning: \texttt{Y} = year, \texttt{M} = month, \texttt{D} = day, \texttt{H} = hour, \texttt{mm} = minutes, \texttt{S}
% = seconds, \texttt{T} or \texttt{TZ} = timezone string. The number of letters indicates the length except for the
% timezone which is of variable length.  An example is \enquote{\texttt{\pdffilemoddate{\jobname.dtx}}} which is the
% file modification date of the source file of this manual.  Unfortunately this number is to large for TeX to be taken
% as an integer for numerical comparisons, so it is broken into two numbers (\texttt{YYYYMMDD} and \texttt{HHmmSS})
% which are compared in multiple steps.
%
% \DescribeMacro{\filemodparse}{<macro>}{<\/filename>}
% Parses the file modification datetime of the given file and passes the result to the given macro.
% The macro will receive seven arguments:
% \begin{quote}
% `<macro>{<YYYY>}{<MM>}{<DD>}{<HH>}{<mm>}{<SS>}{<TZ>}`
% \end{quote}
% i.e.\ year, month, day, hour, minutes, seconds and the timezone as signed offset
% or `Z` (catcode 12).
%
%
% \DescribeMacro{\filemodnotexists}{<macro>}
% This macro will be called by `|\filemodparse` with the original given macro when the given file does not exists. By default
% it contains all zeros except `Z` (catcode 12) as timezone:
%
% \begin{quote}
% `!\#1!{0000}{00}{00}{00}{00}{00}{Z}`
% \end{quote}
% The user can redefine this macro to a different content, e.g.\ to a different fall-back value or to display a warning.
% Note if this macro contains non-expandable code the macros which uses it aren't expandable anymore.
%
%
%
% \subsection{Auxiliary Macros}
%
% \DescribeMacro{\filemodZ}
% Defined to "Z" with catcode 12 as it is returned as timezone.
% This might be useful for comparisons or custom definitions.
%
% \DescribeMacro{\filemodz}
% Let (`|\let`) to "Z" with catcode 12 as it is returned as timezone.
% This might be useful for comparisons or custom definitions.
%
%
% \StopEventually{}
%
% \clearpage
% \section{Implementation}
%
% \iffalse
%<@filemod-expmin.sty>
% \fi
%
% \iffalse
%<@filemod.sty>
% \fi
%
% \Finale
% \endinput
