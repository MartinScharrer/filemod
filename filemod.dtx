% \iffalse meta-comment
%
% Copyright (C) 2011 by Martin Scharrer <martin@scharrer-online.de>
% ---------------------------------------------------------------------------
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Martin Scharrer.
%
% This work consists of the files filemod.dtx and filemod.ins
% and the derived filebase filemod.sty.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{filemod.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{filemod}
%<*package>
    [2011/03/09 v1.0 Get and compare file modification times]
%</package>
%
%<*driver>
\documentclass{ydoc}
\usepackage{filemod}[2011/03/09]
\usepackage{filemod-exp}[2011/03/09]
\usepackage{filemod-expmin}[2011/03/09]
\usepackage{filemod-aux}[2011/03/09]
\usepackage{filemod-dis}[2011/03/09]
\def\enq#1{`#1'}
\MakeShortMacroArgs\`\relax
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{filemod.dtx}
  \DocInput{filemod-aux.dtx}
  \DocInput{filemod-dis.dtx}
  \DocInput{filemod-exp.dtx}
  \DocInput{filemod-expmin.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{550}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2011/03/09}{Converted to DTX file}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \GetFileInfo{filemod.dtx}
% \author{Martin Scharrer}
% \email{martin@scharrer-online.de}
% \maketitle
%
% \begin{abstract}
%   This package provides macros to read and compare the modification dates of files.
%   This files can be |.tex| files, images or other files as long as they can be found by the \LaTeX\ compiler.
%   It uses the |\pdffilemoddate| primitive of pdf\LaTeX\ to receive the file modification date as PDF
%   date string, parses it and returns the value to the user.
%   This package will also work for DVI output with recent versions of the \LaTeX\ compiler which uses pdf\LaTeX\ in DVI mode.
%   The functionality is provided by purely expandable macros or by faster but non-expandable ones.
% \end{abstract}
%
% \section{Introduction}
% This package provides several macros to read and compare the modification dates of files.
% The same functionality is provided by two groups of macros:
% The macros of the first group all start with a lower case letter and are fully expandable.
% This means they can be used in places where a string must be provided, like in `|\input` or `|\includegraphics`.
% Because assignments are not expandable some of these macros, like the ones for comparisons, need to reread and re-parse the
% file modification dates if they are required in more than one place inside the macro.
%
% The macros of the second group all start with a upper case letter and are not expandable because assignments are used internally.
% However, this allows techniques which speed up the processing of these macros, making this macros faster than the expandable counterparts.
% If expandability is not required these macros should be preferred.
%
% \section{Options and alternative Interface}
%
%
%
% \section{Macros}
%
% \subsection{Print File Modification Date and Time}
%
% \DescribeMacro{\filemodprint}{<\/filename>}
% Prints the file modifications date and time by calling `|\filemodparse|\thefilemod{<\/filename>}`.
%
%
% \DescribeMacro{\filemodprintdate}{<\/filename>}
% Prints the file modifications date by calling `|\filemodparse|\thefilemoddate{<\/filename>}`.
%
%
% \DescribeMacro{\filemodprinttime}{<\/filename>}
% Prints the file modifications time by calling `|\filemodparse|\thefilemodtime{<\/filename>}`.
%
%
% \DescribeMacro{\thefilemod}
% Reads the date and time as seven arguments and typesets it. This macro can be redefined to a custom format.\\
% Default format: \enq{\filemodprint{\jobname.dtx}}
%
%
% \DescribeMacro{\thefilemoddate}
% Reads the date and time as seven arguments and typesets only the date. This macro can be redefined to a custom format.\\
% Default format: \enq{\filemodprintdate{\jobname.dtx}}
%
%
% \DescribeMacro{\thefilemodtime}
% Reads the date and time as seven arguments and typesets only the time. This macro can be redefined to a custom format.\\
% Default format: \enq{\filemodprinttime{\jobname.dtx}}
%
%
% \subsection{Get File Modification Date and Time as Number}
%
% \DescribeMacro{\filemodnumdate}{<\/filename>}
% Expands to an integer of the form |YYYYMMDD| which can be used for numeric comparisons like `|\ifnum`.
% This macros uses `|\filemodparse` and `|\filemodnotexists` will be used if the file does not exist.
%
% \DescribeMacro{\filemodnumtime}{<\/filename>}
% Expands to an integer of the form |HHmmSS| which can be used for numeric comparisons like `|\ifnum`.
% This macros uses `|\filemodparse` and `|\filemodnotexists` will be used if the file does not exist.
%
% \DescribeMacro{\filemodNumdate}{<\/filename>}
% Expands to an integer of the form |YYYYMMDD| which can be used for numeric comparisons like `|\ifnum`.
% Parses the file modification date by itself and will return |00000000| if the file does not exist.
%
% \DescribeMacro{\filemodNumtime}{<\/filename>}
% Expands to an integer of the form |HHmmSS| which can be used for numeric comparisons like `|\ifnum`.
% Parses the file modification date by itself and will return |000000| if the file does not exist.
%
%
% \DescribeMacro{\Filemodgetnum}{<\/filename>}
% Stores the file modification date and time as numbers (|YYYYMMDD| and |HHmmSS|) as well the timezone string
% into the macros `|\filemoddate`, `|\filemodtime` and `|\filemodtz`.
%
%
% \subsection{Compare File Modification Date/Time}
%
% \DescribeMacro{\filemodnewest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Expands the file name of the newest given file or file `<num>` if both file modification dates are identical.
%
% \DescribeMacro{\filemodoldest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Expands the file name of the oldest given file or file `<num>` if both file modification dates are identical.
%
%
% \DescribeMacro{\filemodNewest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Expands the file name of the newest given file.
% The files are compared in pairs of two in the given order (i.e.\ first 1 and 2 and the result with 3 etc.)
% The optional argument `<num>` can be used to indicate which file name should be used if both file modification dates are identical.
%
%
% \DescribeMacro{\filemodOldest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Expands the file name of the oldest given file.
% The files are compared in pairs of two in the given order (i.e.\ first 1 and 2 and the result with 3 etc.)
% The optional argument `<num>` can be used to indicate which file name should be used if both file modification dates are identical.
%
%
% \DescribeMacro{\Filemodnewest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Same as `|\filemodnewest` just not expandable but faster.
%
%
% \DescribeMacro{\Filemodoldest}[<num>]{<\/filename 1>}{<\/filename 2>}
% Same as `|\filemodoldest` just not expandable but faster.
%
%
% \DescribeMacro{\FilemodNewest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Same as `|\filemodNewest` just not expandable but faster.
%
%
% \DescribeMacro{\FilemodOldest}[<num>]{{<\/filename 1>}{<\/filename 2>}'...'{<\/filename n>}}
% Same as `|\filemodOldest` just not expandable but faster.
%
%
% \DescribeMacro{\filemodcmp}[<num>]{<\/filename 1>}{<\/filename 2>}{<clause 1>}{<clause 2>}!\optional!{<clause 3>}
% This macro compares the file modification date and time of the two given files and expands to the clause of the
% newest file. An numerical optional argument can be given to determine the outcome if both files have the exact same 
% modification date/time (or both do not exists). If `<num>` is 0, no clause will be expanded, i.e.\ the macro expands
% to an empty text. If `<num>` is 1 (default) or 2 the macro expands to the corresponding clause.
% However if `<num>` is 3, the macro will await a third clause and expands to it if both files modification dates are equal.
%
% This macro is fully expandable even when the optional argument is used. However, `<\/filename 1>` must not be equal to "[".
%
%
% \DescribeMacro{\filemodCmp}{<\/filename 1>}{<\/filename 2>}{<clause 1>}{<clause 2>}
% This is a simpler and therefore faster version of `|\filemodcmp`. It is fully expandable, does not take any optional
% arguments and will always expand to the first clause if both file modification dates are equal (or both files do not exist).
% The `|\filemodNumdate` and `|\filemodNumtime` macros are used in the comparison.
%
%
% \DescribeMacro{\Filemodcmp}[<num>]{<\/filename 1>}{<\/filename 2>}{<clause 1>}{<clause 2>}!\optional!{<clause 3>}
% This macro provides the same functionality as `|\filemodcmp`.
% It is not expandable but will be processed faster. The optional
% argument is processed like normally.
%
% \DescribeMacro{\FilemodCmp}[<num>]{<\/filename 1>}{<\/filename 2>}
% This macro will compare the two file modification dates like `|\Filemodcmp` and `|\filemodcmp` but does not take
% the possible clauses as arguments, instead it stores the result into the expandable macro `|\filemodcmpresult`
% which then takes `{<clause~1>}!\linebreak[3]!{<clause~2>}` (and also `{<clause~3>}` if `<num>` was 3) as arguments and expand to the one
% corresponding to the newest file.
% This set of macros gives the user the speed benefit of `|\Filemodcmp` while still be able to use the result in an expandable context.
%
%
% \DescribeMacro{\filemodcmpdefault}
% Holds the default number (i.e.\ 1) for the optional arguments of the previous mentioned macros.
% This macro can be redefined with a number or a numeric expression valid for |\ifcase|. It should not contain any
% trailing spaces.
%
%
% \subsection{Parsing of the file modification date}
% The format returned by the |\pdffilemoddate| primitive is \enq{\texttt{D:}} followed by a number in the format \enq{YYYYMMDDHHmmSST} which needs to be parsed before
% it is useful. An example is \enq{\pdffilemoddate{\jobname}} which is the file modification date of the source file of this manual.
% Unfortunately this number is to large for TeX to be taken as an integer for numerical comparisons, so it is broken into two numbers (YYYYMMDD and HHmmSS) which are compared
% in multiple steps.
%
% \DescribeMacro{\filemodparse}{<macro>}{<\/filename>}
% Parses the file modification datetime of the given file and passes the result to the given macro.
% The macro will receive seven arguments:
% \begin{quote}
% `<macro>{<YYYY>}{<MM>}{<DD>}{<HH>}{<mm>}{<SS>}{<TZ>}`
% \end{quote}
% i.e.\ year, month, day, hour, minutes, seconds and the timezone as signed offset
% or `Z` (catcode 12).
%
%
%
% \DescribeMacro{\filemodnotexists}{<macro>}
% This macro will be called by `|\filemodparse` with the original given macro when the given file does not exists. By default
% it contains all zeros except `Z` (catcode 12) as timezone:
%
% \begin{quote}
% `!\#1!{0000}{00}{00}{00}{00}{00}{Z}`
% \end{quote}
% The user can redefine this macro to a different content, e.g.\ to a different fall-back value or to display a warning.
% Note if this macro contains non-expandable code the macros which uses it aren't expandable anymore.
%
%
%
% \subsection{Auxiliary Macros}
%
% \DescribeMacro{\filemodZ}
% Defined to "Z" with catcode 12 as it is returned as timezone.
% This might be useful for comparisons or custom definitions.
%
% \DescribeMacro{\filemodz}
% Let (`|\let`) to "Z" with catcode 12 as it is returned as timezone.
% This might be useful for comparisons or custom definitions.
%
%
% \StopEventually{}
%
% \section{Implementation}
%
