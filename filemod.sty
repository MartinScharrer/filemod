%
% \subsection{Header of \pkg{filemod}}
%
%    \begin{macrocode}
%<!COPYRIGHT>
%<*latex>
\ProvidesPackage{filemod}[%
%<!DATE>
%<!VERSION>
%<*DRIVER>
    2099/01/01 develop
%</DRIVER>
    Get and compare file modification times]
%</latex>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*latex>
\RequirePackage{filemod-expmin}
%</latex>
%<tex>\input filemod-expmin
%    \end{macrocode}
%
% Ensure correct catcode for plainTeX:
%    \begin{macrocode}
%<tex>\expandafter\edef\csname filemod@cat\endcsname{\noexpand\catcode`\noexpand\@=\the\catcode`\@\relax}
%<tex>\catcode`\@=11
%    \end{macrocode}
%
%
% \subsection{Parser}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \begin{macro}{\filemodparse}[2]{Macro or tokens to process result}{file name}
%    \begin{macrocode}
%<*latex>
\newcommand*\filemodparse{}
%</latex>
\iffilemod@direct
\def\filemodparse#1#2{%
    \expandafter\filemod@parse\pdffilemoddate{#2}\relax{#1}%
}
\else
\def\filemodparse#1#2{%
    \expandafter\expandafter
    \expandafter\filemod@parse\pdf@filemoddate{#2}\relax{#1}%
}
\fi
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@parse}[2]{Expanded file mod date}{Macro}
%    \begin{macrocode}
\def\filemod@parse#1\relax#2{%
    \ifx\relax#1\relax
        \expandafter\@firstoftwo
    \else
        \expandafter\@secondoftwo
    \fi
    {\filemodnotexists{#2}}%
    {\filemod@parse@#1\empty{#2}\relax}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
% The "D", ":" and "Z" characters are changed to catcode 12 because this is how they appear in the string
% returned by `|\pdffilemoddate`.
%    \begin{macrocode}
\begingroup
\catcode`\D=12
\catcode`\Z=12
\catcode`\:=12
%    \end{macrocode}
%
% \begin{macro}{\filemod@parse@}[9]{Y1}{Y2}{Y3}{Y4}{M1}{M2}{D1}{D2}{Rest}
%    \begin{macrocode}
\gdef\filemod@parse@ D:#1#2#3#4#5#6#7#8#9\relax{%
    \filemod@parse@@{{#1#2#3#4}{#5#6}{#7#8}}#9\relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodnotexists}[1]{Macro provided to \Macro\filemodparse}
% Macro which is used for non-existing files.
%    \begin{macrocode}
%<*latex>
\newcommand*\filemodnotexists{}
%</latex>
\gdef\filemodnotexists#1{%
    #1{0000}{00}{00}{00}{00}{00}{Z}%
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\endgroup
%    \end{macrocode}
%
%
%
% \begin{macro}{\filemod@parse@@}[9]{\{YYYY\}\{MM\}\{DD\}}{H1}{H2}{m1}{m2}{S1}{S2}{TZ}{Macro}
% Reads the rest of the file mod date and places the resulting arguments in front of the given macro.
%    \begin{macrocode}
\def\filemod@parse@@#1#2#3#4#5#6#7#8\empty#9\relax{%
    #9#1{#2#3}{#4#5}{#6#7}{#8}%
}
%    \end{macrocode}
% \end{macro}
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsection{Expandable Macros}
%
% \subsubsection{Numeric macros}
%
% \begin{macro}{\filemodnumdate}
% Simply calls the parse macro.
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\filemodnumdate{\filemodparse\filemod@numdate}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@numdate}[7]{YYYY}{MM}{DD}{HH}{mm}{SS}{TZ}
%    \begin{macrocode}
% Gobbles everything except "YYYYMMDD" which is returned as number without the braces.
\def\filemod@numdate#1#2#3#4#5#6#7{#1#2#3}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\filemodnumtime}
% Simply calls the parse macro.
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\filemodnumtime{\filemodparse\filemod@numtime}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@numtime}[7]{YYYY}{MM}{DD}{HH}{mm}{SS}{TZ}
% Gobbles everything except "HHmmSS" which is returned as number without the braces.
%    \begin{macrocode}
\def\filemod@numtime#1#2#3#4#5#6#7{#4#5#6}
%    \end{macrocode}
% \end{macro}
%
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Optional argument handler}
%
% \begin{macro}{\filemod@opt}[3]{Macro to read optional argument when present}{Next macro which receives default
% optional argument as first normal argument}{\texttt{[} or first mandatory argument}
% This macro checks if an optional argument is present. Here |#1| and |#2| are handlers and |#3| is the first balanced
% text which followed the macro, i.e.\ either "[" or the first mandatory argument.
% The |\ifx| compares "[" and the first token of |#3|. There are three possible cases:
% \begin{enumerate}
%   \item If they do not match everything until and including |\else| is skipped.  Then |\remove@to@nnil@exec| is
%   expanded which removes the following |\@nnil|. This leaves |\empty| and the rest of the \emph{false} clause.  The
%   |\fi| is removed using |\expandafter| and the trailing |{#3}| is read by |#2| as normal argument.
%   \item If |#3| is exactly "[" the |\ifx[#3| part is removed by \TeX. The |\remove@to@nnil@exec| removes the |\@nnil|
%   and the |\remove@to@nnil| because there was nothing before |\@nnil|.  Therefore |\expandafter#1| is executed which
%   triggers |\else| which removes everything up to and including |\fi|.  Then the optional argument handler |#1| is
%   expanded which receives the "[" as "{[}" which is then gobbled.
%   \item The |#3| starts with "[" but contains more material, i.e.\ was original a mandatory argument. Then |\ifx|
%   expands to the \emph{true} clause and removes the first token of |#3|. The |\remove@to@nnil@exec| gobbles the rest
%   of |#3| but reads and reinserts |\remove@to@nnil| which gobbles everything to the next |\@nnil| after |\else| and
%   therefore jumps to the \emph{false} clause. This clause is executed like normal, i.e.\ |#2| is called with the
%   default optional argument and |{#3}| as second argument.
% \end{enumerate}
%    \begin{macrocode}
\def\filemod@opt#1#2#3{%
    \expandafter
    \remove@to@nnil@exec
    \ifx[#3\@nnil\remove@to@nnil
      \expandafter#1%
    \else\@nnil\empty
      \expandafter#2%
      \expandafter\filemodoptdefault
    \fi
    {#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\remove@to@nnil@exec}[2]{Tokens to remove}{Following token}
% Removes everything to |\@nnil| and executes the next token except if |#1| was empty.
%    \begin{macrocode}
\def\remove@to@nnil@exec#1\@nnil#2{%
    \ifx\@nnil#1\@nnil\else
      \expandafter#2
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \subsubsection{Compare file dates}
%
% \begin{macro}{\filemodcmp}
% Compare two file mod dates.
% Calls macros to check for an optional argument in an expandable way.
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\filemodcmp{%
    \filemod@opt\filemod@cmp@opt\filemod@cmp
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodoptdefault}
% The default optional argument which is used if none is provided.
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\filemodoptdefault{1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@cmp@opt}[2]{"[" wrapped in \{\}}{Content of optional argument}
% Removes the brackets from the optional argument.
%    \begin{macrocode}
\def\filemod@cmp@opt#1#2]{%
    \filemod@cmp{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@cmp}
% This saves several |\expandafter|'s in \Macro\filemod@opt.
%    \begin{macrocode}
\def\filemod@cmp{\filemod@@cmp>}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@@cmp}[4]{Compare sign: \texttt{>} or \texttt{<}}{Optional argument}{File name 1}{File name 2}
% Compares the dates and times of the two files. The three cases are (0) file 1 newer than file 2, (1) file 2 newer than file 1,
% (2) both files have the same date.
%
% In (2) the optional argument |#2| determines which clause is executed.
%    \begin{macrocode}
\def\filemod@@cmp#1#2#3#4{%
    \ifcase0%
        \ifnum\filemodnumdate{#4}#1\filemodnumdate{#3} 1\else
            \ifnum\filemodnumdate{#4}=\filemodnumdate{#3} %
                \ifnum\filemodnumtime{#4}#1\filemodnumtime{#3} 1\else
                    \ifnum\filemodnumtime{#4}=\filemodnumtime{#3} 2\fi
                \fi
            \fi
        \fi
    \space
       \csname @firstoft\ifnum#2>2 hree\else wo\fi\expandafter\endcsname
    \or
       \csname @secondoft\ifnum#2>2 hree\else wo\fi\expandafter\endcsname
    \else
       \csname @%
       \ifcase#2%
         gobbletwo%
       \or
         firstoftwo%
       \or
         secondoftwo%
       \else
         thirdofthree%
       \fi
       \expandafter
       \endcsname
    \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@firstofthree}
% Expands to the first of the next three arguments.
%    \begin{macrocode}
\long\def\@firstofthree#1#2#3{#1}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@secondofthree}
% Expands to the second of the next three arguments.
%    \begin{macrocode}
\long\def\@secondofthree#1#2#3{#2}
%    \end{macrocode}
% \end{macro}
%
% Some required \LaTeX{} macros for the plain\TeX{} version:
%    \begin{macrocode}
%<tex>\long\def\@thirdofthree#1#2#3{#3}
%<tex>\long\def\@gobble#1{}
%<tex>\long\def\@gobbletwo#1#2{}
%<tex>\def\remove@to@nnil#1\@nnil{}
%    \end{macrocode}
%
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% \subsubsection{Compare file mod times and return file name}
%
%
% \begin{macro}{\filemodnewest}
% First a macro is called to handle an optional argument in an expandable way.
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\filemodnewest{%
    \filemod@opt\filemod@newest@opt\filemod@newest
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@newest@opt}[2]{The "[" wrapped in \{\}}{Content of optional argument}
% Removes braces around the optional argument.
%    \begin{macrocode}
\def\filemod@newest@opt#1#2]{%
    \filemod@newest{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@newest}[3]{optional argument}{file name 1}{file name 2}
% Uses the normal (internal) compare macro with the file names as the result clauses.
%    \begin{macrocode}
\def\filemod@newest#1#2#3{%
    \filemod@@cmp>{#1}{#2}{#3}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
%
% \begin{macro}{\filemodoldest}
% First a macro is called to handle an optional argument in an expandable way.
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\filemodoldest{%
    \filemod@opt\filemod@oldest@opt\filemod@oldest
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@oldest@opt}[2]{The "[" wrapped in \{\}}{Content of optional argument}
% Removes braces around the optional argument.
%    \begin{macrocode}
\def\filemod@oldest@opt#1#2]{%
    \filemod@oldest{#2}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@oldest}[3]{optional argument}{file name 1}{file name 2}
% Uses the normal (internal) compare macro with the file names as the result clauses.
%    \begin{macrocode}
\def\filemod@oldest#1#2#3{%
    \filemod@@cmp<{#1}{#2}{#3}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Newest and oldest file of a list of files}
%
% \begin{macro}{\filemodNewest}[1]{Tokens between macros and opening brace}
% Checks for an optional argument and substitutes the default if it is missing.
%    \begin{macrocode}
%<*latex>
\newcommand*\filemodNewest{}
%</latex>
\def\filemodNewest#1#{%
  \expandafter\expandafter
  \expandafter\@filemodNewest
  \csname
    @%
  \ifx\@nnil#1\@nnil
    first%
  \else
    second%
  \fi
    oftwo%
  \endcsname
    {[\filemodoptdefault]}%
    {#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodOldest}[1]{Tokens between macros and opening brace}
% Like \Macro\filemodNewest but returns the oldest file in the given list.
% It and its sub-macros are simply copies of minor changes of the |Newest| counterparts.
% This is done for the benefit of expansion speed versus memory usage.
% Future versions might use common code instead.
%    \begin{macrocode}
%<*latex>
\newcommand*\filemodOldest{}
%</latex>
\def\filemodOldest#1#{%
  \expandafter\expandafter
  \expandafter\@filemodOldest
  \csname
    @%
  \ifx\@nnil#1\@nnil
    first%
  \else
    second%
  \fi
    oftwo%
  \endcsname
    {[\filemodoptdefault]}%
    {#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@filemodNewest}[2]{Optional argument}{File name list}
% Removes "[]" from first and braces from the second argument (the filename list).
%    \begin{macrocode}
\def\@filemodNewest[#1]#2{%
    \@@filemodNewest{#1}#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@filemodOldest}[2]{Optional argument}{File name list}
% Like \Macro\@filemodNewest.
%    \begin{macrocode}
\def\@filemodOldest[#1]#2{%
    \@@filemodOldest{#1}#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@@filemodNewest}[2]{Optional argument}{First file name}
% Reads the optional argument as |#1| and the first filename as |#2|.
% It then reverses the order for the processing loop.
%    \begin{macrocode}
\def\@@filemodNewest#1#2{%
    \filemod@Newest{#2}{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@@filemodOldest}[2]{Optional argument}{First file name}
%    \begin{macrocode}
\def\@@filemodOldest#1#2{%
    \filemod@Oldest{#2}{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@Newest}[3]{First file name}{Optional argument}{Second file name}
% Checks if the second filename is the end marker. In this case the first filename is returned (i.e.\ expanded to).
% Otherwise expands the compare macro. This is done in one step using |\csname| which is then turned into a string
% which |\| is gobbled. Because of the required expandability the |\escapechar| can't be changed.
% Finally it calls itself recursively with the expanded result.
%    \begin{macrocode}
\def\filemod@Newest#1#2#3{%
  \iffilemod@end{#3}%
    {#1}%
    {%
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\filemod@Newest
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter{%
    \expandafter\expandafter
    \expandafter\@gobble
    \expandafter\string\csname\filemod@@cmp>{#2}{#1}{#3}{#1}{#3}\endcsname}{#2}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@Oldest}[3]{First file name}{Optional argument}{Second file name}
% Like \Macro\filemode@Newest but with different compare operator.
%    \begin{macrocode}
\def\filemod@Oldest#1#2#3{%
  \iffilemod@end{#3}%
    {#1}%
    {%
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\filemod@Oldest
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter\expandafter
    \expandafter{%
    \expandafter\expandafter
    \expandafter\@gobble
    \expandafter\string\csname\filemod@@cmp<{#2}{#1}{#3}{#1}{#3}\endcsname}{#2}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\iffilemod@end}[1]{Next filename or end marker}
% Checks if the argument is the \Macro\filemod@end marker.
%    \begin{macrocode}
\def\iffilemod@end#1{%
  \ifx\filemod@end#1%
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@end}
% Unique end marker which would expand to nothing.
% Could be replaced with |\@nnil|.
%    \begin{macrocode}
\def\filemod@end{\@gobble{filemod@end}}
%    \end{macrocode}
% \end{macro}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%
% \subsection{Non-Expandable Macros}
% The following macros are not expandable but contain assignments which must be
% executed. This makes them faster because information can be buffered.
% Some of them can return expandable results.
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Get Numeric Representation of File Modification Date}
%
% \begin{macro}{\Filemodgetnum}
%    \begin{macrocode}
%<*latex>
\newcommand*%
%</latex>
%<tex>\def
\Filemodgetnum{\filemodparse\Filemod@getnum}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemod@getnum}
%    \begin{macrocode}
\def\Filemod@getnum#1#2#3#4#5#6#7{%
    \def\filemoddate{#1#2#3}%
    \def\filemodtime{#4#5#6}%
    \def\filemodtz{#7}%
}
%    \end{macrocode}
% \end{macro}
%
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Compare Two File Modification Dates}
%
% \begin{macro}{\Filemodcmp}[1]{Optional argument (default: "1")}
% Calls \Macro\Filemod@cmp to execute the result at the end.
%    \begin{macrocode}
%<*latex>
\newcommand\Filemodcmp[1][1]{%
    \def\filemod@next{\filemodcmpresult}%
    \Filemod@cmp{#1}%
}
%</latex>
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\FilemodCmp}
% Calls \Macro\Filemod@cmp to not execute the result at the end.
% Instead the user must use \Macro\filemodcmpresult explicitly.
%    \begin{macrocode}
%<*latex>
\newcommand\FilemodCmp[1][1]{%
    \let\filemod@next\empty
    \Filemod@cmp{#1}%
}
%</latex>
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemod@cmp}[3]{Optional argument}{File name 1}{File name 2}
% Compares both files and defines \Macro\filemodcmpresult so that it expands
% to the winning clause. It might be directly executed at the end or not depending
% on the definition of \Macro\filemod@next which is set by the user level macros
% which use this macro.
%    \begin{macrocode}
\def\Filemod@cmp#1#2#3{%
    \Filemodgetnum{#2}%
    \let\filemoddatea\filemoddate
    \let\filemodtimea\filemodtime
    \Filemodgetnum{#3}%
    \ifcase0%
        \ifnum\filemoddate>\filemoddatea\space1\else
            \ifnum\filemoddate=\filemoddatea\space
                \ifnum\filemodtime>\filemodtimea\space1\else
                    \ifnum\filemodtime=\filemodtimea\space2\fi
                \fi
            \fi
        \fi
    \relax
%    \end{macrocode}
% First file is newer:
%    \begin{macrocode}
       \def\filemodresultfile{#1}%
       \ifnum#1>2\relax
          \def\filemodcmpresult##1##2##3{##1}%
       \else
          \let\filemodcmpresult\@firstoftwo
       \fi
    \or
%    \end{macrocode}
% Second file is newer:
%    \begin{macrocode}
       \def\filemodresultfile{#2}%
       \ifnum#1>2\relax
          \def\filemodcmpresult##1##2##3{##2}%
       \else
          \let\filemodcmpresult\@secondoftwo
       \fi
    \else
%    \end{macrocode}
% File mod dates are equal. The optional argument determines which clause is used.
%    \begin{macrocode}
       \ifcase#1\relax
         \let\filemodresultfile\empty
         \let\filemodcmpresult\@gobbletwo
       \or
         \def\filemodresultfile{#1}%
         \let\filemodcmpresult\@firstoftwo
       \or
         \def\filemodresultfile{#2}%
         \let\filemodcmpresult\@secondoftwo
       \else
         \let\filemodresultfile\empty
         \let\filemodcmpresult\@thirdofthree
       \fi
    \fi
    \filemod@next
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\filemodcmpresult}
% Defined above.
% \end{macro}
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Compare file mod times and return file name}
%
% Handlers for optional arguments for plain\TeX{}.
% If none is provided the \Macro\filemodoptdefault is used.
%    \begin{macrocode}
%<*IGNORE>
\iffalse
%</IGNORE>
%<*tex>
\def\filemod@chkopt#1{%
    \def\filemod@optcmd{#1}%
    \futurelet\filemod@tok\filemod@@chkopt
}
\def\filemod@@chkopt{%
    \ifx[\filemod@tok
        \expandafter\filemod@readopt
    \else
        \expandafter\filemod@optcmd
        \expandafter\filemodoptdefault
    \fi
}
\def\filemod@readopt[#1]{%
    \filemod@optcmd{#1}%
}
%</tex>
%<*IGNORE>
\fi
%</IGNORE>
%    \end{macrocode}
%
% \begin{macro}{\Filemodnewest}
% Simply uses \Macro\FilemodNewest.
%    \begin{macrocode}
%<*latex>
\newcommand*\Filemodnewest[3][\filemodoptdefault]{\FilemodNewest[{#1}]{{#2}{#3}}}
%</latex>
%<tex>\def\Filemodnewest{\filemod@chkopt\Filemod@newest}
%<tex>\def\Filemod@newest#1#2#3{\Filemod@Newest{#1}{{#2}{#3}}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemodoldest}
% Simply uses \Macro\FilemodOldest.
%    \begin{macrocode}
%<*latex>
\newcommand*\Filemodoldest[3][\filemodoptdefault]{\FilemodOldest[{#1}]{{#2}{#3}}}
%</latex>
%<tex>\def\Filemodoldest{\filemod@chkopt\Filemod@oldest}
%<tex>\def\Filemod@oldest#1#2#3{\Filemod@Oldest{#1}{{#2}{#3}}}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\FilemodNewest}
% Uses \Macro\Filemod@est with a different compare sign.
% Stores the optional argument for later processing. This avoids the need to pass it around as an argument.
%    \begin{macrocode}
%<*latex>
\newcommand*\FilemodNewest[2][\filemodoptdefault]%
%</latex>
%<tex>\def\FilemodNewest{\filemod@chkopt\Filemod@Newest}
%<tex>\def\Filemod@Newest#1#2%
{%
    \def\filemode@tie{#1}%
    \def\filemod@gl{>}%
    \Filemod@est#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\FilemodOldest}
% Uses \Macro\Filemod@est with a different compare sign.
% Stores the optional argument for later processing. This avoids the need to pass it around as an argument.
%    \begin{macrocode}
%<*latex>
\newcommand*\FilemodOldest[2][\filemodoptdefault]%
%</latex>
%<tex>\def\FilemodOldest{\filemod@chkopt\Filemod@Oldest}
%<tex>\def\Filemod@Oldest#1#2%
{%
    \def\filemode@tie{#1}%
    \def\filemod@gl{<}%
    \Filemod@est#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\Filemod@est}[1]{file name 1}
% Initiates the macros with the name, date and time of the first file.
% Then the recursive part is called.
%    \begin{macrocode}
\def\Filemod@est#1{%
    \def\filemodresultfile{#1}%
    \Filemodgetnum{#1}%
    \let\filemodresultdate\filemoddate
    \let\filemodresulttime\filemodtime
    \Filemod@@est
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemod@@est}[1]{Next filename or end marker}
% Recursive part. Simple aborts (expands to nothing) if |#1| is the end-marker.
% Then the resulting file is in \Macro\filemodresultfile and the date and time are in
% \Macro\filemodresultdate and \Macro\filemodresulttime, respectively.
%    \begin{macrocode}
\def\Filemod@@est#1{%
  \iffilemod@end{#1}{}{%
    \Filemodgetnum{#1}%
    \ifcase0%
        \ifnum\filemoddate\filemod@gl\filemodresultdate\space1\else
            \ifnum\filemoddate=\filemodresultdate\space
                \ifnum\filemodtime\filemod@gl\filemodresulttime\space1\else
                    \ifnum\filemodtime=\filemodresulttime\space
                        \ifnum\filemode@tie=1\else 1\fi
                    \fi
                \fi
            \fi
        \fi
    \else
        \def\filemodresultfile{#1}%
        \let\filemodresultdate\filemoddate
        \let\filemodresulttime\filemodtime
    \fi
    \Filemod@@est
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@gl}
% Initial value of compare sign. Not really required to be defined here because
% it is defined to the required sign every time it is used.
%    \begin{macrocode}
\def\filemod@gl{>}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Macros to print \qq{today} string}
%
% \begin{macro}{\Filemodtoday}
%    \begin{macrocode}
%<*latex>
\newcommand*\Filemodtoday[1]%
%</latex>
%<tex>\def\Filemodtoday#1%
{{%
    \def\thefilemod##1##2##3##4##5##6##7{\year##1 \month##2 \day##3 \today}%
    \filemodprint{#1}%
}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FilemodToday}
%    \begin{macrocode}
%<*latex>
\newcommand*\FilemodToday[1]%
%</latex>
%<tex>\def\FilemodToday#1%
{{%
    \def\thefilemoddate##1##2##3{\year##1 \month##2 \day##3 \today}%
    \filemodprint{#1}%
}}
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsection{Display Macros}
%
% \begin{macro}{\filemodprint}
%    \begin{macrocode}
%<*latex>
\newcommand*
%</latex>
%<tex>\def
\filemodprint{\filemodparse\thefilemod}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodprintdate}
%    \begin{macrocode}
%<*latex>
\newcommand*
%</latex>
%<tex>\def
\filemodprintdate{\filemodparse\the@filemoddate}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemodprinttime}
%    \begin{macrocode}
%<*latex>
\newcommand*
%</latex>
%<tex>\def
\filemodprinttime{\filemodparse\the@filemodtime}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\thefilemod}
%    \begin{macrocode}
%<*latex>
\newcommand*\thefilemod[7]%
%</latex>
%<tex>\def\thefilemod#1#2#3#4#5#6#7%
{%
    \thefilemoddate{#1}{#2}{#3}%
    \filemodsep
    \thefilemodtime{#4}{#5}{#6}{#7}%
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%<*latex>
\newcommand*\filemodsep{ }
%</latex>
%<tex>\let\filemodsep\space
%    \end{macrocode}
%
% \begin{macro}{\thefilemoddate}
%    \begin{macrocode}
%<*latex>
\newcommand*\thefilemoddate[3]%
%</latex>
%<tex>\def\thefilemoddate#1#2#3%
{#1/#2/#3}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\thefilemodtime}
%    \begin{macrocode}
%<*latex>
\newcommand*\thefilemodtime[4]%
%</latex>
%<tex>\def\thefilemodtime#1#2#3#4%
{%
    #1:#2:#3~#4%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\the@filemoddate}
%    \begin{macrocode}
\def\the@filemoddate#1#2#3#4#5#6#7{%
    \thefilemoddate{#1}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\the@filemodtime}
%    \begin{macrocode}
\def\the@filemodtime#1#2#3{%
    \thefilemodtime
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Auxiliary Macros}
% 
% The "Z" characters are changed to catcode 12 because this is how they appear in the string
% returned by `|\pdffilemoddate`.
%    \begin{macrocode}
%<*latex>
\newcommand*\filemodZ{}
\newcommand*\filemodz{}
%</latex>
\begingroup
\catcode`\D=12
%    \end{macrocode}
%
% \begin{macro}{\filemodZ}
% Holds "Z" with catcode 12 (\emph{other}) like it is returned by `|\pdffilemoddate`.
% Requires use of |\csname| because "Z" isn't a letter at the moment.
%    \begin{macrocode}
\expandafter\gdef\csname filemodZ\endcsname{Z}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\filemodz}
%    \begin{macrocode}
\let\filemodz=Z\relax
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\endgroup
%    \end{macrocode}
%
% Restore catcode for plainTeX:
%    \begin{macrocode}
%<tex>\filemod@cat
%<tex>\expandafter\let\csname filemod@cat\endcsname\relax
%    \end{macrocode}
