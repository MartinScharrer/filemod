%
% \iffalse
%<*exe>
% \fi
%
% \subsection{Non-Expandable Macros}
% The following macros are not expandable but contain assignments which must be
% executed. This makes them faster because information can be buffered.
% Some of them can return expandable results.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Get Numeric Representation of File Modification Date}
%
% \begin{macro}{\Filemodgetnum}
%    \begin{macrocode}
\newcommand*\Filemodgetnum{\filemodparse\Filemod@getnum}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemod@getnum}
%    \begin{macrocode}
\def\Filemod@getnum#1#2#3#4#5#6#7{%
    \def\filemoddate{#1#2#3}%
    \def\filemodtime{#4#5#6}%
    \def\filemodtz{#7}%
}
%    \end{macrocode}
% \end{macro}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Compare Two File Modification Dates}
%
% \begin{macro}{\Filemodcmp}[1]{Optional argument (default: "1")}
% Calls \Macro\Filemod@cmp to execute the result at the end.
%    \begin{macrocode}
\newcommand\Filemodcmp[1][1]{%
    \def\filemod@next{\filemodcmpresult}%
    \Filemod@cmp{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\FilemodCmp}
% Calls \Macro\Filemod@cmp to not execute the result at the end.
% Instead the user must use \Macro\filemodcmpresult explicitly.
%    \begin{macrocode}
\newcommand\FilemodCmp[1][1]{%
    \let\filemod@next\empty
    \Filemod@cmp{#1}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemod@cmp}[3]{Optional argument}{File name 1}{File name 2}
% Compares both files and defines \Macro\filemodcmpresult so that it expands
% to the winning clause. It might be directly executed at the end or not depending
% on the definition of \Macro\filemod@next which is set by the user level macros
% which use this macro.
%    \begin{macrocode}
\def\Filemod@cmp#1#2#3{%
    \Filemodgetnum{#2}%
    \let\filemoddatea\filemoddate
    \let\filemodtimea\filemodtime
    \Filemodgetnum{#3}%
    \ifcase0%
        \ifnum\filemoddate>\filemoddatea\space1\else
            \ifnum\filemoddate=\filemoddatea\space
                \ifnum\filemodtime>\filemodtimea\space1\else
                    \ifnum\filemoddate=\filemoddatea\space2\fi
                \fi
            \fi
        \fi
    \relax
%    \end{macrocode}
% First file is newer:
%    \begin{macrocode}
       \def\filemodcmpfile{#1}%
       \ifnum#1>2\relax
          \def\filemodcmpresult##1##2##3{##1}%
       \else
          \let\filemodcmpresult\@firstoftwo
       \fi
    \or
%    \end{macrocode}
% Second file is newer:
%    \begin{macrocode}
       \def\filemodcmpfile{#2}%
       \ifnum#1>2\relax
          \def\filemodcmpresult##1##2##3{##2}%
       \else
          \let\filemodcmpresult\@secondoftwo
       \fi
    \else
%    \end{macrocode}
% File mod dates are equal. The optional argument determines which clause is used.
%    \begin{macrocode}
       \ifcase#1\relax
         \let\filemodcmpfile\empty
         \let\filemodcmpresult\@gobbletwo
       \or
         \def\filemodcmpfile{#1}%
         \let\filemodcmpresult\@firstoftwo
       \or
         \def\filemodcmpfile{#2}%
         \let\filemodcmpresult\@secondoftwo
       \else
         \let\filemodcmpfile\empty
         \let\filemodcmpresult\@thirdofthree
       \fi
    \fi
    \filemod@next
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\filemodcmpresult}
% Defined above.
% \end{macro}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \subsubsection{Compare file mod times and return file name}
%
% \begin{macro}{\Filemodnewest}
% Simply uses \Macro\FilemodNewest.
%    \begin{macrocode}
\newcommand*\Filemodnewest[2]{\FilemodNewest{{#1}{#2}}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemodoldest}
% Simply uses \Macro\FilemodOldest.
%    \begin{macrocode}
\newcommand*\Filemodoldest[2]{\FilemodOldest{{#1}{#2}}}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\FilemodNewest}
% Uses \Filemod@est with a different compare sign.
% Stores the optional argument for later processing. This avoids the need to pass it around as an argument.
%    \begin{macrocode}
\newcommand*\FilemodNewest[2][1]{%
    \def\filemode@tie{#1}%
    \def\filemod@gl{>}%
    \Filemod@est#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\FilemodOldest}
% Uses \Filemod@est with a different compare sign.
% Stores the optional argument for later processing. This avoids the need to pass it around as an argument.
%    \begin{macrocode}
\newcommand*\FilemodOldest[2][1]{%
    \def\filemode@tie{#1}%
    \def\filemod@gl{<}%
    \Filemod@est#2\filemod@end
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\Filemod@est}[1]{file name 1}
% Initiates the macros with the name, date and time of the first file.
% Then the recursive part is called.
%    \begin{macrocode}
\def\Filemod@est#1{%
    \def\filemodcmpfile{#1}%
    \Filemodgetnum{#1}%
    \let\filemodcmpdate\filemoddate
    \let\filemodcmptime\filemodtime
    \Filemod@@est
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\Filemod@@est}[1]{Next file name or end marker}
% Recursive part. Simple aborts (expands to nothing) if |#1| is the end-marker.
% Then the resulting file is in \Macro\filemodcmpfile and the date and time are in
% \Macro\filemodcmpdate and \Macro\filemodcmptime, respectively.
%    \begin{macrocode}
\def\Filemod@@est#1{%
  \iffilemod@end{#1}{}{%
    \Filemodgetnum{#1}%
    \ifcase0%
        \ifnum\filemoddate\filemod@gl\filemodcmpdate\space1\else
            \ifnum\filemoddate=\filemodcmpdate\space
                \ifnum\filemodtime\filemod@gl\filemodcmptime\space1\else
                    \ifnum\filemoddate=\filemodcmpdate\space
                        \ifnum\filemode@tie=1\else 1\fi
                    \fi
                \fi
            \fi
        \fi
    \else
        \def\filemodcmpfile{#1}%
        \let\filemodcmpdate\filemoddate
        \let\filemodcmptime\filemodtime
    \fi
    \Filemod@@est
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\filemod@gl}
% Initial value of compare sign. Not really required to be defined here because
% it is defined to the required sign every time it is used.
%    \begin{macrocode}
\def\filemod@gl{>}
%    \end{macrocode}
% \end{macro}
%
%
% \iffalse
%</exe>
% \fi
%
